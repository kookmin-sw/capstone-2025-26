name: Deploy Django Application

on:
  push:
    branches:
      - develop
    paths:
      - 'journey/**'  # journey 폴더 내 변경사항만 감지

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create .env file
        run: |
          mkdir -p journey # Ensure journey directory exists in the runner workspace
          echo "${{ secrets.MAP }}" > journey/.env
        shell: bash
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'  # 사용하는 Python 버전에 맞게 조정
          
      - name: Copy .env file to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "journey/.env"
          target: "serv/capstone-2025-26/journey/" # Target directory on the server
          
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd serv/capstone-2025-26 # Adjust if your project root on the server is different
            git fetch --all
            git reset --hard origin/develop
            # git pull is redundant after reset --hard
            
            # Navigate to the directory with docker-compose.yml
            cd journey 
            
            # .env file is copied via scp in the previous step
            
            # Build and restart containers using Docker Compose
            sudo docker compose down # Stop existing containers (optional, but often safer)
            sudo docker compose pull # Pull latest images if specified in compose file
            sudo docker compose up -d --remove-orphans --build # Start services in detached mode and remove old containers
            
            # Optional: Run migrations if not handled within container startup
            # docker-compose exec <your_django_service_name> python manage.py migrate

            # Remove unused docker images and volumes (optional cleanup)
            # docker image prune -af
            # docker volume prune -f

